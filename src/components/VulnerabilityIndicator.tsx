import React, { useContext, useRef, useMemo } from "react";
import {
  Box,
  Chip,
  Tooltip,
  Typography,
  Stack,
  IconButton,
  Link,
} from "@mui/material";
import {
  Security as SecurityIcon,
  Warning as WarningIcon,
  Error as ErrorIcon,
  CheckCircle as CheckCircleIcon,
  LockOutlined as LockIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
} from "@mui/icons-material";
import { useQuery } from "@tanstack/react-query";
import { ConfigContext } from "../context/ConfigContext";
import { DependabotAlertSummary, DependabotAlert } from "../models/DependabotAlert";
import { useOnScreen } from "../hooks/useOnScreen";
import { AsyncChip } from "./AsyncChip";

interface VulnerabilityIndicatorProps {
  repositoryFullName: string;
  compact?: boolean;
  expanded?: boolean;
  onToggleExpanded?: () => void;
  showExpandButton?: boolean;
}

export const VulnerabilityIndicator: React.FC<VulnerabilityIndicatorProps> = ({
  repositoryFullName,
  compact = false,
  expanded = false,
  onToggleExpanded,
  showExpandButton = false,
}) => {
  const { octokit } = useContext(ConfigContext);
  const ref = useRef<HTMLDivElement>(null);
  const isOnScreen = useOnScreen(ref);

  // Helper function to generate security URL
  const getSecurityUrl = (severity?: string) => {
    if (!octokit) {
      // Fallback to GitHub.com if no octokit instance
      const baseUrl = `https://github.com/${repositoryFullName}/security/dependabot`;
      if (severity) {
        return `${baseUrl}?q=is%3Aopen+severity%3A${severity}`;
      }
      return `${baseUrl}?q=is%3Aopen`;
    }

    const baseWebUrl = octokit.getBaseWebUrl();
    const baseUrl = `${baseWebUrl}/${repositoryFullName}/security/dependabot`;
    if (severity) {
      return `${baseUrl}?q=is%3Aopen+severity%3A${severity}`;
    }
    return `${baseUrl}?q=is%3Aopen`;
  };

  const enabled = useMemo(
    () =>
      isOnScreen && octokit !== undefined && repositoryFullName !== undefined,
    [isOnScreen, octokit, repositoryFullName]
  );

  const {
    data: summary,
    isLoading,
    error,
  } = useQuery<DependabotAlertSummary>({
    queryKey: ["dependabot-alerts", repositoryFullName],
    queryFn: async () => {
      if (octokit) {
        return octokit.getDependabotAlertsSummary(repositoryFullName);
      }
      throw new Error("No octokit instance available");
    },
    enabled: enabled,
    retry: (failureCount, error: any) => {
      if (error?.status === 401 || error?.status === 403) {
        return false;
      }
      return failureCount < 2;
    },
    staleTime: 5 * 60 * 1000, // 5 minutes - vulnerability data doesn't change frequently
  });

  // Fetch actual alerts to get open-only severity counts
  const {
    data: openAlerts,
    isLoading: isLoadingAlerts,
  } = useQuery<DependabotAlert[]>({
    queryKey: ["dependabot-alerts-open", repositoryFullName],
    queryFn: async () => {
      if (octokit) {
        return octokit.getDependabotAlerts(repositoryFullName, { state: 'open' });
      }
      throw new Error("No octokit instance available");
    },
    enabled: enabled && !!summary && summary.open > 0, // Only fetch if there are open alerts
    retry: (failureCount, error: any) => {
      if (error?.status === 401 || error?.status === 403) {
        return false;
      }
      return failureCount < 2;
    },
    staleTime: 5 * 60 * 1000, // 5 minutes - vulnerability data doesn't change frequently
  });

  const getErrorInfo = () => {
    if (!error) return null;

    const errorObj = error as any;

    if (errorObj?.status === 403) {
      return {
        icon: <LockIcon />,
        label: "Access Denied",
        tooltip:
          "You don't have access to security alerts for this repository. Contact the repository owner to grant access.",
        color: "default" as const,
      };
    }

    if (errorObj?.status === 404) {
      return {
        icon: <WarningIcon />,
        label: "Not Found",
        tooltip: "Repository not found or Dependabot is not enabled",
        color: "default" as const,
      };
    }

    return {
      icon: <WarningIcon />,
      label: "Error",
      tooltip: "Failed to load vulnerability information",
      color: "default" as const,
    };
  };

  const errorInfo = getErrorInfo();

  if (errorInfo) {
    return (
      <div ref={ref}>
        <Tooltip title={errorInfo.tooltip}>
          <Chip
            icon={errorInfo.icon}
            label={errorInfo.label}
            size="small"
            color={errorInfo.color}
            variant="outlined"
          />
        </Tooltip>
      </div>
    );
  }

  if (!summary) {
    return (
      <div ref={ref}>
        <AsyncChip
          isLoading={isLoading}
          label="Security"
          size="small"
          tooltip="Loading vulnerability information..."
          color="default"
        />
      </div>
    );
  }

  // Calculate open severity counts from openAlerts if available, otherwise use summary.open count
  const { open } = summary;
  let criticalCount = 0;
  let highCount = 0;
  let mediumCount = 0;
  let lowCount = 0;

  if (openAlerts) {
    // Count severity levels from actual open alerts
    openAlerts.forEach((alert) => {
      switch (alert.security_advisory.severity) {
        case 'critical':
          criticalCount++;
          break;
        case 'high':
          highCount++;
          break;
        case 'medium':
          mediumCount++;
          break;
        case 'low':
          lowCount++;
          break;
      }
    });
  } else if (open > 0) {
    // Show loading state if we're still fetching open alerts
    return (
      <div ref={ref}>
        <AsyncChip
          isLoading={isLoadingAlerts}
          label="Security"
          size="small"
          tooltip="Loading vulnerability details..."
          color="default"
        />
      </div>
    );
  }

  // Determine severity info for display
  const getSeverityInfo = () => {
    if (open === 0) {
      return {
        color: "success" as const,
        icon: <CheckCircleIcon />,
        label: "Secure",
        tooltip: "No open security vulnerabilities",
      };
    }

    if (criticalCount > 0) {
      return {
        color: "error" as const,
        icon: <ErrorIcon />,
        label: `${criticalCount} Critical`,
        tooltip: `${criticalCount} critical, ${highCount} high, ${mediumCount} medium, ${lowCount} low vulnerabilities`,
      };
    }

    if (highCount > 0) {
      return {
        color: "warning" as const,
        icon: <WarningIcon />,
        label: `${highCount} High`,
        tooltip: `${highCount} high, ${mediumCount} medium, ${lowCount} low vulnerabilities`,
      };
    }

    if (mediumCount > 0) {
      return {
        color: "info" as const,
        icon: <SecurityIcon />,
        label: `${mediumCount} Medium`,
        tooltip: `${mediumCount} medium, ${lowCount} low vulnerabilities`,
      };
    }

    return {
      color: "default" as const,
      icon: <SecurityIcon />,
      label: `${lowCount} Low`,
      tooltip: `${lowCount} low vulnerabilities`,
    };
  };

  const severityInfo = getSeverityInfo();

  if (compact) {
    return (
      <div ref={ref}>
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            gap: 0.5,
            cursor: showExpandButton && open > 0 ? "pointer" : "default",
          }}
          onClick={showExpandButton && open > 0 ? onToggleExpanded : undefined}
        >
          <Tooltip title={severityInfo.tooltip}>
            <Chip
              icon={severityInfo.icon}
              label={severityInfo.label}
              size="small"
              color={severityInfo.color}
              variant="filled"
              component="div"
              sx={{ 
                cursor: "pointer",
                minWidth: '80px',
                '& .MuiChip-label': {
                  fontSize: '0.75rem',
                  fontWeight: 500,
                }
              }}
            />
          </Tooltip>
          {showExpandButton && open > 0 && (
            <Tooltip title={expanded ? "Hide details" : "Show details"}>
              <IconButton
                size="small"
                sx={{
                  p: 0,
                  minWidth: "auto",
                  width: 20,
                  height: 20,
                  "&:hover": { bgcolor: "action.hover" },
                }}
                onClick={(e) => {
                  e.stopPropagation();
                  onToggleExpanded?.();
                }}
              >
                {expanded ? (
                  <ExpandLessIcon fontSize="small" />
                ) : (
                  <ExpandMoreIcon fontSize="small" />
                )}
              </IconButton>
            </Tooltip>
          )}
        </Box>
      </div>
    );
  }

  // Show expanded content (used when expanded=true in compact mode or in full mode)
  // Don't show expanded view if there are no open issues
  if ((expanded || !compact) && open > 0) {
    return (
      <Box ref={ref} sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
        <Stack direction="row" alignItems="center" spacing={1}>
          <SecurityIcon color="action" />
          <Typography variant="subtitle2">Security Vulnerabilities</Typography>
        </Stack>

        <Stack direction="row" spacing={1} flexWrap="wrap">
          {criticalCount > 0 && (
            <Link
              href={getSecurityUrl("critical")}
              target="_blank"
              rel="noopener noreferrer"
              sx={{ textDecoration: "none" }}
            >
              <Chip
                icon={<ErrorIcon />}
                label={`${criticalCount} Critical`}
                size="small"
                color="error"
                variant="filled"
                component="div"
                sx={{ cursor: "pointer" }}
              />
            </Link>
          )}
          {highCount > 0 && (
            <Link
              href={getSecurityUrl("high")}
              target="_blank"
              rel="noopener noreferrer"
              sx={{ textDecoration: "none" }}
            >
              <Chip
                icon={<WarningIcon />}
                label={`${highCount} High`}
                size="small"
                color="warning"
                variant="filled"
                component="div"
                sx={{ cursor: "pointer" }}
              />
            </Link>
          )}
          {mediumCount > 0 && (
            <Link
              href={getSecurityUrl("medium")}
              target="_blank"
              rel="noopener noreferrer"
              sx={{ textDecoration: "none" }}
            >
              <Chip
                label={`${mediumCount} Medium`}
                size="small"
                color="info"
                variant="outlined"
                component="div"
                sx={{ cursor: "pointer" }}
              />
            </Link>
          )}
          {lowCount > 0 && (
            <Link
              href={getSecurityUrl("low")}
              target="_blank"
              rel="noopener noreferrer"
              sx={{ textDecoration: "none" }}
            >
              <Chip
                label={`${lowCount} Low`}
                size="small"
                color="default"
                variant="outlined"
                component="div"
                sx={{ cursor: "pointer" }}
              />
            </Link>
          )}
        </Stack>
      </Box>
    );
  }

  return null;
};

export default VulnerabilityIndicator;
